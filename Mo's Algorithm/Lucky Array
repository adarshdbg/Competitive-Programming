#include <bits/stdc++.h>
#define endl '\n'
#define MAXNUM 100003
#define MAXN 50003
#define BUCKET_SIZE 230
using namespace std;
int n, m, k;
int tr[MAXNUM];
int get(int pos)
{
    if (pos <= 0)
        return 0;
        if (pos > 100000)
            pos = 100000;
    int ans = 0;
    for (pos; pos >= 1; pos -= pos & -pos)
        ans += tr[pos];
    return ans;
}
void update(int pos, int add)
{
    for (pos; pos <= 100000; pos += pos & -pos)
        tr[pos] += add;
}
struct query
{
    int l, r, idx;
    bool operator < (const query &t) const
    {
        return ((l / BUCKET_SIZE < t.l / BUCKET_SIZE) || (l / BUCKET_SIZE == t.l / BUCKET_SIZE && r < t.r));
    }
    query() {}
    query(int _l, int _r, int _idx)
    {
        l = _l;
        r = _r;
        idx = _idx;
    }
};
int arr[MAXN];
query queries[MAXN];
int ans[MAXN];
int cnt;
void add_number(int num)
{
    cnt += get(num - k) + get(100000) - get(num + k - 1);
    update(num, 1);
}
void extract_number(int num)
{
    cnt -= get(num - k) + get(100000) - get(num + k - 1);
    update(num, -1);
}
void read()
{
    cin >> n >> m >> k;
    for (int i = 1; i <= n; i++)
        cin >> arr[i];
    for (int i = 1; i <= m; i++)
    {
        cin >> queries[i].l >> queries[i].r;
        queries[i].idx = i;
    }
}
void solve()
{
    sort (queries+1, queries+m+1);
    int l = queries[1].l, r = queries[1].r;
    for (int i = l; i <= r; i++)
        add_number(arr[i]);
    ans[queries[1].idx] = cnt;
    for (int i = 2; i <= m; i++)
    {
         while (l > queries[i].l)
         {
             l--;
             add_number(arr[l]);
         }
         while (l < queries[i].l)
         {
             extract_number(arr[l]);
             l++;
         }
         while (r > queries[i].r)
         {
             extract_number(arr[r]);
             r--;
         }
         while (r < queries[i].r)
         {
             r++;
             add_number(arr[r]);
         }
         ans[queries[i].idx] = cnt;
    }
    for (int i = 1; i <= m; i++)
        cout << ans[i] << endl;
}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
    read();
    solve();
}
