/*
    Time Complexity :: O(2^n *n*n)
    Space Complexity :: O(2^n)
*/

#include <bits/stdc++.h>
using namespace std;

int dp[(1<<20)][20];

int count_bits(int n){
    int ans=0;
    while(n){
        ans++;
        n>>=1;
    }
    return ans;
}

int solve(int left_mask,bool flag,int *a,int n){
    // Base case
    if(left_mask==0){
        return 0;
    }
    int &res=dp[left_mask][flag];
    if(res!=-1){
        return res;
    }
    // Rec case
    int right_mask=(((1<<20)-1)^left_mask);
    res=INT_MAX;
    if(flag==1){
        // We are curently at right side and wants to move to left side 
        int person,min_ans=INT_MAX;
        for(int j=0;j<n;j++){
            if(right_mask&(1<<j)){
                if(min_ans>a[j]){
                    min_ans=a[j];
                    person=j;
                }
            }
        }
        res=min(res,a[person]+solve(left_mask^(1<<person),flag^1,a,n));
    }   
    else{
        if(count_bits(left_mask)==1){
            int index=0;
            for(int i=0;i<n;i++){
                if(left_mask&(1<<i)){
                    index=i;
                    break;
                }
            }
            res=a[index];
        }
        else{
            for(int i=0;i<n;i++){
                for(int j=i+1;j<n;j++){
                    if((left_mask&(1<<i))&&(left_mask&(1<<j))){
                        res=min(res,max(a[i],a[j])+solve(left_mask^(1<<i)^(1<<j),flag^1,a,n));
                    }
                }
            }
        }
    }
    
    return res;
    
}

int main() {
	
	int n;
	cin>>n;
	int a[n];
	for(int i=0;i<n;i++){
	    cin>>a[i];
	}
	memset(dp,-1,sizeof(dp));
	cout<<solve((1<<n)-1,0,a,n)<<endl;
	
	
	return 0;
}
