#include <bits/stdc++.h>
using namespace std;
#define ll long long 

const ll mod = 1e9+7;

ll dp[100000][2][2][2][2][2];
ll XOR;
string t_xor;

string A;
ll SIZE;
ll find_ans(ll i,ll f1,ll f2,ll c1,ll c2,bool iszero){
    // Base Case
    if(i==A.size()){
        return ((c1+c2==0) && f2==1 && iszero==1);
    }
    // Rec Case
    if(dp[i][f1][f2][c1][c2][iszero]!=-1){
        return dp[i][f1][f2][c1][c2][iszero];
    }   

    dp[i][f1][f2][c1][c2][iszero]=0;
    for(ll x=0;x<=1;x++){
        if(f1==0 && x>A[i]-'0') break;
        for(ll y=0;y<=1;y++){
            if(f2==0 && y>x) break;
            
            if((x + y + c2 > 1) == c1 && (x ^ y ^ ((x + y + c2) % 2)) == (t_xor[i]-'0')){
                dp[i][f1][f2][c1][c2][iszero]+=find_ans(i+1,f1|(x<A[i]-'0'),f2|(y<x),c2,0,iszero|(y>0));
                dp[i][f1][f2][c1][c2][iszero]%=mod;
                dp[i][f1][f2][c1][c2][iszero]+=find_ans(i+1,f1|(x<A[i]-'0'),f2|(y<x),c2,1,iszero|(y>0));
                dp[i][f1][f2][c1][c2][iszero]%=mod;
            }
        }
    }
    return dp[i][f1][f2][c1][c2][iszero];
}
string func(ll n){

    string s;
    while(n){
        s.push_back((n&1)+48);
        // cout<<(n&1);
        n>>=1;
    }
    ll i=0,j=s.size()-1;
    while(i<=j){
        swap(s[i],s[j]);
        i++;
        j--;
    }
    return s;

}
int main() {

    ll tt;
    cin>>tt;
    while(tt--){
        ll n;
        cin>>n;
        // Xor of 1 to n is 
        
        if(n%4==0){
            XOR=n;
        }
        else if(n%4==1){
            XOR=1;
        }
        else if(n%4==2){
            XOR=n+1;
        }
        else{
            XOR=0;
        }
        t_xor=func(XOR);
        A=func(n);
        SIZE=t_xor.size();
        if(!t_xor[0]){
            for(ll i=0;A[i];i++){
                t_xor.push_back('0');
            }
        }
        // cout<<SIZE<<" ";/
        // cout<<t_xor<<" "<<A<< " ";
        memset(dp,-1,sizeof(dp));
        cout<<(find_ans(0,0,0,0,0,0)+find_ans(0,0,0,0,1,0))%mod<<endl;
    }

}
