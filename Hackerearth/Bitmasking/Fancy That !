#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define vd(T) vector<vector<T>>
#define v(T) vector<T>
#define mod (ll)(1e9+7)
#define pp(T) pair<T,T>
#define pb push_back
#define mp make_pair
#define NN 100005
#define IO ios_base::sync_with_stdio(NULL),cin.tie(0),cout.tie(0)
#define loop(i,a,b) for(ll i=a;i<b;i++)
#define DEBUG cout<<"***********DEBUGGING***********"<<endl
#include <ext/pb_ds/assoc_container.hpp> // Common file 
#include <ext/pb_ds/tree_policy.hpp> 
using namespace __gnu_pbds; 
typedef tree<ll, null_type, less<ll>, rb_tree_tag, tree_order_statistics_node_update> ordered_set; 
ll power(ll a,ll b){ if(b==0) return 1; ll s=power(a,b/2); s*=s;if(b&1) return s*a; return s;}
ll powermod(ll a,ll b,ll m){ if(b==0) return 1; ll s=power(a,b/2);s*=s; s%=m; if(b&1) return (s*a)%m; return s;}
inline int add(ll a,ll b,ll m=0){
    if(m==0) return a+b;
    return (a%m+b%m)%m;
}

inline int sub(ll a,ll b ,ll m=0){
    if(m==0) return a-b;
    return ((a%m-b%m)%m+m)%m;
}

inline int mul(ll a,ll b,ll m=0){
    if(m==0)return (a*b);
    return ((a%m)*(b%m))%m;
}

inline int div(ll a,ll b,ll m=0){
    if(m==0) return a/b;
    return ((a%m)*(powermod(a,b,m-2)%m))%m;
}

bool isopen(char c){
    return ((c=='(')||(c=='{')||(c=='['));
}

ll longest_balanced_parenthesis(string a,ll n){
    stack<char> s;
    ll start=0;
    ll ans=0,m=0;
    for(ll i=0;i<n;i++){
        if(isopen(a[i])){
            s.push(a[i]);
        }
        else{
            if(isopen(a[i])|| s.empty()){
                m=max(m,ans);
                continue;
            }
            else{
                s.pop();
                ans+=2;
                m=max(ans,m);
            }
        }
    }

    return m;

}

ll setup_k(ll *a,ll k){
  ordered_set x;
  // Now , insert and then check number of integers less than k by just using x.order_of_key(k+1)
}

ll integer(string s){
    ll ans=0;
    ll p=1;
    for(ll i=0;i<s.size();i++){
        ans=ans*10+s[i]-'0';
    }
    return ans;
}

void sum(string s,ll i,string b,ll& ans){
    if(i==s.size()){
        ans+=integer(b);
        return;
    }
    sum(s,i+1,b,ans);
    b.push_back(s[i]);
    sum(s,i+1,b,ans);
    return ;
}

string get_string(ll n){
    string s;
    while(n){
        s.push_back(n%10+48);
        n/=10;
    }
    reverse(s.begin(),s.end());
    return s;
}

ll subseq_sum(ll n){
    string s=get_string(n);
    string a;
    ll ans=0;
     sum(s,0,a,ans);
     return ans;
}

ll find_ans(ll n){
    if(n<=0){
        return 0;
    }
    if(n<=9){
        return n/2;
    }
    
    ll ans=0;
    string s=get_string(n);
    ans=0;
    for(ll i=1;i<=s.size()-1;i++){
        ans+=4*power(10,i-1);
    }
    // Now we are left with the numbers having number of digit equals to that of n
    for(ll i=2;i<s[0]-48;i+=2){
        ans+=power(10,s.size()-1);
    }
    ll t=s[0]-48;
    if(t%2==0){
        for(ll i=s.size()-1;i>0;i--){
            if(1){
                ans+=(s[i]-48)*power(10,s.size()-i-1);
            }
        }
        ans+=1;
    }
    return ans;
}

int main() {

    IO; 

    ll tt;
    cin>>tt;
    while(tt--){
        ll l,r;
        cin>>l>>r;
        cout<<find_ans(r)-find_ans(l-1)<<endl;
    }
    

}
