#include <bits/stdc++.h>
using namespace std;
#define ll long long 
vector<ll> digits;
ll total_digits(ll a){
    ll ans=0;
    while(a){
        ans+=1;
        a/=10;
    }
    return ans;
}
ll dp[33][2][100][100];
ll a,b,k;
ll f(ll i,ll flag,ll sod,ll N){
    // Base Case
    if(i==(digits.size()+1)){
        return (sod==0 && N==0);
    }
    
    if(dp[i][flag][sod][N]!=-1) return dp[i][flag][sod][N];
    
    // Rec Case
    ll ans=0;
    ll limit=9;
    if(flag){
        limit=digits[i-1];
    }
    for(ll j=0;j<=limit;j++){
        if(j<digits[i-1]){
            ans+=f(i+1,0,(sod+j)%k,(N*10+j)%k);
        }
        else{
            ans+=f(i+1,flag,(sod+j)%k,(N*10+j)%k);
        }
    }
    return dp[i][flag][sod][N]=ans;
}

ll solve(){

    return f(1,1,0,0);

}

int main() {

    ll tt;
    cin>>tt;
    ll cnt=0;
    while(tt--){
        cout<<"Case "<<cnt+1<<": ";
        cnt++;
        memset(dp,-1,sizeof(dp));
        cin>>a>>b>>k;
        ll t=b;
        digits.clear();
        while(t){
            digits.push_back(t%10);
            t/=10;
        }
        ll i=0,j=digits.size()-1;
        while(i<=j){
            swap(digits[i],digits[j]);
            i++;
            j--;
        }
        if(k>81){
            cout<<0<<endl;
            continue;
        }
        else{
            ll ans=solve();
            if(a==1){
                cout<<ans-1<<endl;
                continue;
            }
            vector<ll> digits1;
            ll A=a-1;
            while(A){
                digits1.push_back(A%10);
                A/=10;
            }
            digits.clear();
            i=0,j=digits1.size()-1;
            while(i<=j){
                swap(digits1[i],digits1[j]);
                i++;
                j--;
            }
            digits=digits1;
            memset(dp,-1,sizeof(dp));
            ans-=solve();
            cout<<ans<<endl;
        }
    }

}
