#include<bits/stdcc++.h>
using namespace std;
class Solution {
public:
    int oddEvenJumps(vector<int>& A) {
        int a[A.size()];
        for(int i=0;i<A.size();i++){
            a[i]=A[i];
        }
        int n=A.size();
        int b[n]// For calculating next greater elements
        fill(b,b+n,-1); // Initialise it to -1
        stack<int> s;
        s.push(0);
        for(int i=2;i<n;i+=2){
            if(a[s.top()]>a[i]){
                s.push(i);
            }
            else{
                while(!s.empty() && a[s.top()]<a[i]){
                    b[s.top()]=i;
                    s.pop();
                }
                s.push(i);
            }
        }
        while(!s.empty()){
            s.pop();
        }
        s.push(1);
        for(int i=3;i<n;i+=2){
            if(a[s.top()]>a[i]){
                s.push(i);
            }
            else{
                while(!s.empty() && a[s.top()]<a[i]){
                    b[s.top()]=i;
                    s.pop();
                }
                s.push(i);
            }
        }
        while(!s.empty()){
            s.pop();
        }
        // Now , we have calculated the index of next greater element 
        int ans=1;
        int dp[n]{0};
        dp[n-1]=1;
        for(int i=n-2;i>=0;i--){
            if(b[i]==-1){
                continue;// We have no option for jump
            }
            else{
                int j=b[i];

                if(dp[j]){
                    ans++;
                }
            }
        }
        return ans;
    }
};
