// Complexity --> O(N*(sqrt(min(A[i]))))
/*
  Abhishek Ranjan
  17CO203,NITK Surathkal
 */
#include<bits/stdc++.h>
#define int long long
using namespace std;

#define sz(c) ((int)c.size())

bool checkDiv(int num, int val)
{
	if((val+1)%num==0 or val%num==0 or (val-1)%num==0) return 1;
	return 0;
}

bool check(int num, vector<int> a)
{
	
	for(int i=1; i<sz(a); i++) {
		if(!checkDiv(num, a[i])) {
			return 0;
		}
	}
	return 1;
}

vector<int> findDivisor(int num)
{
	vector<int> ans;
	for(int i=1; i*i<=num; i++) {
		if(num%i==0) {
			ans.push_back(i);
			ans.push_back(num/i);
		}
	}
	return ans;
}

int32_t main(){
	ios::sync_with_stdio(NULL);
	cin.tie(0);
	// start
	int n;
	cin>>n;
	vector<int> a(n);
	for(int i=0; i<n; i++) {
		cin>>a[i];
	}
	vector<int> b(3);
	b[0]=a[0]-1, b[1]=a[0], b[2]=a[0]+1;

	int ans=0;
	for(int val:b) {
		vector<int> div=findDivisor(val);
		for(int num:div) {
			if(check(num, a)) {
				ans=max(ans, num);
			}
		}
	}
	cout<<ans<<"\n";
	return 0;
}
