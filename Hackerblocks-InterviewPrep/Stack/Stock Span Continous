#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define vd(T) vector<vector<T>>
#define v(T) vector<T>
#define mod (ll)(1e9+7)
#define pp(T) pair<T,T>
#define pb push_back
#define mp make_pair
#define NN 100005
#define IO ios_base::sync_with_stdio(NULL),cin.tie(0),cout.tie(0)
#define loop(i,a,b) for(ll i=a;i<b;i++)
#define DEBUG cout<<"***********DEBUGGING***********"<<endl
ll power(ll a,ll b){ if(b==0) return 1; ll s=power(a,b/2); s*=s;if(b&1) return s*a; return s;}
ll powermod(ll a,ll b,ll m){ if(b==0) return 1; ll s=power(a,b/2);s*=s; s%=m; if(b&1) return (s*a)%m; return s;}
inline int add(ll a,ll b,ll m=0){
    if(m==0) return a+b;
    return (a%m+b%m)%m;
}

inline int sub(ll a,ll b ,ll m=0){
    if(m==0) return a-b;
    return ((a%m-b%m)%m+m)%m;
}

inline int mul(ll a,ll b,ll m=0){
    if(m==0)return (a*b);
    return ((a%m)*(b%m))%m;
}

inline int div(ll a,ll b,ll m=0){
    if(m==0) return a/b;
    return ((a%m)*(powermod(a,b,m-2)%m))%m;
}

bool isopen(char c){
    return ((c=='(')||(c=='{')||(c=='['));
}

ll longest_balanced_parenthesis(string a,ll n){
    stack<char> s;
    ll start=0;
    ll ans=0,m=0;
    for(ll i=0;i<n;i++){
        if(isopen(a[i])){
            s.push(a[i]);
        }
        else{
            if(isopen(a[i])|| s.empty()){
                m=max(m,ans);
                continue;
            }
            else{
                s.pop();
                ans+=2;
                m=max(ans,m);
            }
        }
    }

    return m;

}

void stock_span(ll *a,ll n){
    ll dp[n+1]{0};
    dp[1]=1;
    memset(dp,1,sizeof(dp));
    dp[1]=1;
    for(ll i=2;i<=n;i++){
        if(a[i-1]>=a[i-2]){
            dp[i]=dp[i-1]+1;
        }
        else{
            dp[i]=1;
        }
    }
    for(ll i=1;i<=n;i++){
        cout<<dp[i]<<" ";
    }
    cout<<"END"<<endl;
}

int main() {

    IO; 

    ll n;
    cin>>n;
    ll a[n];
    loop(i,0,n){
        cin>>a[i];
    }
    
    // stack<ll> s;
    // ll ans[n];
    // memset(ans,1,sizeof(ans));
    // // s.push(-1);
    // s.push(0);
    // ans[0]=1;
    // for(ll i=1;i<n;i++){
    //     if(a[s.top()]>a[i]){
    //         s.push(i);
    //     }
    //     else{
    //         while(!s.empty() && a[s.top()]<a[i]){
    //             ans[i]=i-s.top()+1;
    //             s.pop();
    //         }
    //         s.push(i);
    //     }
    // }
    
    // loop(i,0,n){
    //     cout<<ans[i]<<" ";
    // }
    // cout<<"END"<<endl;
    stock_span(a,n);

}
